package thefirstchange.example.com.communicationtext.old;

import java.nio.charset.Charset;

import io.netty.bootstrap.Bootstrap;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioSocketChannel;
import thefirstchange.example.com.communicationtext.config.Config;
import thefirstchange.example.com.communicationtext.netty.NettyClientInitializer;
import thefirstchange.example.com.communicationtext.netty.NettyListener;
import thefirstchange.example.com.communicationtext.util.MyTools;


/**
 * Netty客户端
 */
public class NettyClient {

	private static NettyClient nettyClient = new NettyClient();

	private EventLoopGroup group;


	private NettyListener listener;

	private Channel channel;
	
	private boolean isConnect = false;

	private int reconnectNum = Integer.MAX_VALUE;

	private long reconnectIntervalTime = 100000;
	
	public static NettyClient getInstance(){
		return nettyClient;
	}
	
	public synchronized NettyClient connect(int reconnectIntervalTime) {

		if (!isConnect) {
			group = new NioEventLoopGroup();
			Bootstrap bootstrap = new Bootstrap().group(group)
					.option(ChannelOption.SO_KEEPALIVE,true)
					.channel(NioSocketChannel.class)
					.handler(new NettyClientInitializer(listener));
			
			try {
				bootstrap.connect(Config.ServerIP, Config.ServerPort).addListener(new ChannelFutureListener() {
					@Override
					public void operationComplete(ChannelFuture channelFuture) throws Exception {
						if (channelFuture.isSuccess()) {
							isConnect = true;
							channel = channelFuture.channel();
						} else {
							isConnect = false;
						}
					}
				}).sync();

			} catch (Exception e) {
				//Timber.e(e, e.getMessage());
				listener.onServiceStatusConnectChanged(NettyListener.STATUS_CONNECT_ERROR);
				reconnect(reconnectIntervalTime);
			}
		}
		return this;
	}


	public void disconnect() {
		group.shutdownGracefully();
		setConnectStatus(false);
	}

	public void reconnect(int reconnectIntervalTime ) {
		if( !isConnect){
			//reconnectNum--;
			try {
				Thread.sleep(reconnectIntervalTime);
			} catch (InterruptedException e) {}
			//Timber.e("重新连接");
			disconnect();
			connect(reconnectIntervalTime);
		}else{
			disconnect();
		}
	}

	public boolean sendMsgToServer(byte[] data, ChannelFutureListener listener) {
		boolean flag = channel != null && isConnect;
		if (flag) {
			ByteBuf buf = Unpooled.copiedBuffer(data);
			channel.writeAndFlush(buf).addListener(listener);
		}
		return flag;
	}


    /*
        msgtype是要传输的类型  是文件还是普通json
        文件 :       对应的参数为  file        文件名    文件路径     null
        普通json :   对应的参数为  notfile     类型      null         json内容
     */
    public boolean sendMsgToServer(String msgtype, String msgname, String msgpath, String msgbody, ChannelFutureListener listener) {
        boolean flag = channel != null && isConnect;
        try{
            if (flag) {

                if(msgtype.equals("file")){

//                    FileInputStream fileInputStream = new FileInputStream(new File(msgpath));
//                    byte[] bytes = new byte[fileInputStream.available()];
//                    fileInputStream.read(bytes);
                    ByteBuf byteBuf = Unpooled.buffer();
					String encode = MyTools.encodeBase64File(msgbody);
					byte[] bytes = encode.getBytes(Charset.forName("UTF-8"));

					int len = bytes.length;

                    //在发送的byteBuf头部添加真个包的长度
                    byteBuf.writeInt(4+ msgname.getBytes().length +4+ bytes.length);
                    byteBuf.writeInt(msgname.getBytes().length);
                    byteBuf.writeBytes(msgname.getBytes(Charset.forName("UTF-8")));
                    byteBuf.writeInt(bytes.length);
                    byteBuf.writeBytes(bytes);
                    channel.writeAndFlush(byteBuf).addListener(listener);

                }else{

                    ByteBuf byteBuf = Unpooled.buffer();
//                    Log.e("bb",msgbody+"   "+msgbody.getBytes().length+"   --------------------");
//                    Log.e("aaaa",4+msgname.getBytes().length +4+ msgbody.getBytes().length+"  ========");
                    //在发送的byteBuf头部添加真个包的长度
                    byteBuf.writeInt(4+msgname.getBytes().length + 4+ msgbody.getBytes().length);
                    byteBuf.writeInt(msgname.getBytes().length);
                    byteBuf.writeBytes(msgname.getBytes(Charset.forName("UTF-8")));
                    byteBuf.writeInt(msgbody.getBytes().length);
                    byteBuf.writeBytes(msgbody.getBytes());
                    channel.writeAndFlush(byteBuf).addListener(listener);
//					Log.e("aaaaaa","sendsucess+                  )))))00000000000000");
                }


            }
            return flag;
        }catch(Exception a){
            a.printStackTrace();
            return flag;
        }

    }


	public boolean sendFileMsgToServer(String msgname,byte[] bytes, ChannelFutureListener listener) {
		boolean flag = channel != null && isConnect;
		try{
			if (flag) {
				//文件的话  先编码   语音base64编码后变为String


//                    FileInputStream fileInputStream = new FileInputStream(new File(msgpath));
//                    byte[] bytes = new byte[fileInputStream.available()];
//                    fileInputStream.read(bytes);
				ByteBuf byteBuf = Unpooled.buffer();
				//在发送的byteBuf头部添加真个包的长度
				byteBuf.writeInt(4+ msgname.getBytes().length +4+ bytes.length);
				byteBuf.writeInt(msgname.getBytes().length);
				byteBuf.writeBytes(msgname.getBytes(Charset.forName("UTF-8")));
				byteBuf.writeInt(bytes.length);
				byteBuf.writeBytes(bytes);
				channel.writeAndFlush(byteBuf).addListener(listener);



			}
			return flag;
		}catch(Exception a){
			a.printStackTrace();
			return flag;
		}

	}



	public void setReconnectNum(int reconnectNum) {
		this.reconnectNum = reconnectNum;
	}

	public void setReconnectIntervalTime(long reconnectIntervalTime) {
		this.reconnectIntervalTime = reconnectIntervalTime;
	}
	
	public boolean getConnectStatus(){
		return isConnect;
	}
	
	public void setConnectStatus(boolean status){
		this.isConnect = status;
	}
	
	public void setListener(NettyListener listener) {
		this.listener = listener;
	}

	public void setService(NettyService nettyService){

	}


}
